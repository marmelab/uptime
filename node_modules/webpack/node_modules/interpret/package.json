{
  "name": "interpret",
  "description": "A dictionary of file extensions and associated module loaders.",
  "version": "0.5.2",
  "homepage": "https://github.com/tkellen/node-interpret",
  "author": {
    "name": "Tyler Kellen",
    "url": "http://goingslowly.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tkellen/node-interpret.git"
  },
  "bugs": {
    "url": "https://github.com/tkellen/node-interpret/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/tkellen/node-interpret/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "keywords": [
    "cirru-script",
    "cjsx",
    "co",
    "coco",
    "coffee-script",
    "coffee",
    "coffee.md",
    "csv",
    "es",
    "es6",
    "iced",
    "iced.md",
    "iced-coffee-script",
    "ini",
    "js",
    "json",
    "json5",
    "jsx",
    "react",
    "litcoffee",
    "liticed",
    "ls",
    "livescript",
    "toml",
    "ts",
    "typescript",
    "wisp",
    "xml",
    "yaml",
    "yml"
  ],
  "readme": "# interpret\n> A dictionary of file extensions and associated module loaders.\n\n[![NPM](https://nodei.co/npm/interpret.png)](https://nodei.co/npm/interpret/)\n\n## What is it\nThis is used by [Liftoff](http://github.com/tkellen/node-liftoff) to automatically require dependencies for configuration files, and by [rechoir](http://github.com/tkellen/node-rechoir) for registering module loaders.\n\n## API\n\n### extensions\nMap file types to modules which provide a [require.extensions] loader.\n```js\n{\n  '.babel.js': 'babel/register',\n  '.cirru': 'cirru-script/lib/register',\n  '.cjsx': 'node-cjsx/register',\n  '.co': 'coco',\n  '.coffee': 'coffee-script/register',\n  '.coffee.md': 'coffee-script/register',\n  '.csv': 'require-csv',\n  '.iced': 'iced-coffee-script/register',\n  '.iced.md': 'iced-coffee-script/register',\n  '.ini': 'require-ini',\n  '.js': null,\n  '.json': null,\n  '.json5': 'json5/lib/require',\n  '.jsx': 'node-jsx',\n  '.litcoffee': 'coffee-script/register',\n  '.liticed': 'iced-coffee-script/register',\n  '.ls': 'LiveScript',\n  '.toml': 'toml-require',\n  '.ts': 'typescript-register',\n  '.wisp': 'wisp/engine/node',\n  '.xml': 'require-xml',\n  '.yaml': 'require-yaml',\n  '.yml': 'require-yaml'\n}\n```\n\n### legacy\nCheck here to see if a legacy module should be loaded upon failure to load the main module.  If a legacy module is available\nit is recommended to use `try/catch` around the `require`s to avoid crashing the process upon failure to load the main module.\n```js\n{\n  '.coffee': 'coffee-script' // old versions of coffee-script didn't have the `register` module\n}\n```\n\n### register\nCheck here to see if setup is needed for the module register itself with [require.extensions].  If a method is returned, call it with the module.\n```js\n{\n  'toml-require': function (module) {\n    module.install();\n  }\n}\n```\n\n### configurations\nThese configuration options should be passed into any `register` function with the same key.\n```js\n// configurations\n{\n  'node-jsx': {\n    extension: '.jsx',\n    harmony: true\n  }\n}\n// register\n{\n  'node-jsx': function (module, config) {\n    module.install(config);\n  }\n}\n```\n\n### jsVariants\nExtensions which are javascript variants.\n\n```js\n{\n  '.js': null,\n  '.babel.js': 'babel/register',\n  '.cirru': 'cirru-script/lib/register',\n  '.cjsx': 'node-cjsx/register',\n  '.co': 'coco',\n  '.coffee': 'coffee-script/register',\n  '.coffee.md': 'coffee-script/register',\n  '.iced': 'iced-coffee-script/register',\n  '.iced.md': 'iced-coffee-script/register',\n  '.jsx': 'node-jsx',\n  '.litcoffee': 'coffee-script/register',\n  '.liticed': 'iced-coffee-script/register',\n  '.ls': 'LiveScript',\n  '.ts': 'typescript-register',\n  '.wisp': 'wisp/engine/node'\n}\n```\n\n[require.extensions]: http://nodejs.org/api/globals.html#globals_require_extensions\n\n\n### Example Usage\n```js\nconst interpret = require('interpret');\nconst path = require('path');\nconst resolve = require('resolve');\n\n// register support for a defined extension\nfunction register(filepath, cwd) {\n  // find the extension of the requested filename\n  var ext = path.extname(filepath);\n  // see if this extension is already supported\n  if (Object.keys(require.extensions).indexOf(ext) !== -1) {\n    return;\n  }\n  // if no cwd is specified, assume we want to use the\n  // directory the requested file exists in\n  if (!cwd) {\n    cwd = path.dirname(path.resolve(filepath));\n  }\n  // find out which module is needed to read this extension\n  var moduleName = interpret.extensions[ext];\n  // if a module exists for this extension, make it usable\n  if (moduleName) {\n    // find the module relative to cwd that can add support for this extension\n    // optionally deal with legacy modules here\n    var module = resolve.sync(moduleName, {basedir: cwd});\n    // require it\n    var compiler = require(module);\n    // see if there is a method needed beyond requiring to enable support\n    var register = interpret.register[moduleName];\n    var config = interpret.configurations[moduleName];\n    // if there is, run it\n    if (register) {\n      register(compiler, config);\n    }\n  }\n}\n```\n\nNote: this is more or less exactly how [rechoir](http://github.com/tkellen/node-rechoir) works.\n",
  "readmeFilename": "README.md",
  "_id": "interpret@0.5.2",
  "_from": "interpret@^0.5.2"
}
